# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Ansible Playbook to create 2 EC2 VMs running a Tofino simulator with either
# the 'core' or 'aggregate' P4 program. There will be a GRE tunnel between
# the bridge ports of each Tofino simulator
# see - https://docs.openvswitch.org/en/latest/howto/tunneling/
---
- hosts: localhost

  gather_facts: no

  tasks:
    - debug:
        msg: "Start tofino-sim CI"

#    - name: Create Terraform binary directory
#      file:
#        path: ./terraform-12.4
#        state: directory
#
#    - name: Download Terraform
#      unarchive:
#        src: https://releases.hashicorp.com/terraform/0.12.4/terraform_0.12.4_linux_amd64.zip
#        dest: ./terraform-12.4
#        remote_src: yes

    - name: Create VMs
      terraform:
#        binary_path: ./terraform-12.4
        project_path: ./terraform
        variables_file: "{{ tf_var_file }}"
        variables:
          build_id: "{{ build_id }}"
      register: tf_out
    - debug:
        var: tf_out

    - name: Setup hosts
      shell: >-
        ansible-playbook ../playbooks/setup_aws_k8s_node.yaml
        -i '{{ tf_out.outputs.pub_ip_build.value }},{{ tf_out.outputs.pub_ip_master.value }},{{ tf_out.outputs.pub_ip_minion.value }},'
        -u {{ tf_out.outputs.sudo_user.value }}
        --key-file {{ tf_out.outputs.priv_key_file.value }}
        --extra-vars
        'snaps_ci_priv_key={{ tf_out.outputs.priv_key_file.value }}
        snaps_ci_pub_key={{ tf_out.outputs.pub_key_file.value }}'
      environment:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      register: out
    - debug:
        var: out.stdout_lines

    - name: Install snaps-kubernetes
      shell: >-
        ansible-playbook ../playbooks/deploy_k8_aws.yaml
        -i '{{ tf_out.outputs.pub_ip_build.value }},'
        -u {{ tf_out.outputs.sudo_user.value }}
        --key-file {{ tf_out.outputs.priv_key_file.value }}
        --extra-vars
        'build_id={{ build_id }}
        branch_name={{ branch_name | default('master') }}
        src_copy_dir={{ src_copy_dir | default('/tmp') }}
        deployment_yaml_path={{ deployment_yaml_target_path | default('/tmp/deployment.yaml') }}
        sudo_user={{ tf_out.outputs.sudo_user.value }}
        admin_iface={{ admin_iface | default('eth0') }}
        master_admin_ip={{ tf_out.outputs.priv_ip_master.value }}
        minion_admin_ip={{ tf_out.outputs.priv_ip_minion.value }}
        k8s_version={{ k8s_version | default('1.14.3') }}
        networking_plugin={{ networking_plugin | default('weave') }}
        node_host_pass={{ node_host_pass | default('Pa$$w0rd') }}'
      environment:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      register: out
    - debug:
        var: out.stdout_lines

    - name: Validate snaps-kubernetes installation
      shell: >-
        ansible-playbook ../playbooks/validation.yaml
        -i '{{ tf_out.outputs.pub_ip_build.value }},'
        -u {{ tf_out.outputs.sudo_user.value }}
        --key-file {{ tf_out.outputs.pk_file.value }}
        --extra-vars
        'src_copy_dir={{ src_copy_dir | default('/tmp') }}
        deployment_yaml_path={{ deployment_yaml_target_path | default('/tmp/deployment.yaml') }}'
      environment:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      register: out
    - debug:
        var: out.stdout_lines

    - name: Run CNCF Conformance tests against the snaps-kubernetes installation
      shell: >-
        ansible-playbook ../playbooks/conformance.yaml
        -i '{{ tf_out.outputs.pub_ip_build.value }},'
        -u {{ tf_out.outputs.sudo_user.value }}
        --key-file {{ tf_out.outputs.pk_file.value }}
        --extra-vars
        'build_id={{ build_id }}'
      environment:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      register: out
    - debug:
        var: out.stdout_lines

    - name: Destroy VMs
      terraform:
#        binary_path: ./terraform-12.4
        project_path: ./terraform
        variables_file: "{{ tf_var_file }}"
        purge_workspace: yes
        state: absent
        variables:
          build_id: "{{ build_id }}"
      register: tf_out
    - debug:
        var: tf_out
