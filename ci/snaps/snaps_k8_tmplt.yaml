# Copyright (c) 2018 Cable Television Laboratories, Inc. ("CableLabs")
#                    and others.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{% set ubuntu_version=ubuntu_version or '16' %}
---
openstack:
  connections:
    # Note - when http_proxy is set, you must also configure ssh for proxy tunneling on your host.
    - connection:
        name: admin-creds
        username: {{ admin_user }}
        project_name: {{ admin_proj }}
        password: {{ admin_pass }}
        auth_url: {{ auth_url }}
        identity_api_version: {{ id_api_version }}
        proxy_settings:
          host: {{ proxy_host }}
          port: {{ proxy_port }}
          ssh_proxy_cmd: {{ ssh_proxy_cmd }}
  projects:
    - project:
        os_creds_name: admin-creds
        name: k8-deploy-proj-{{ build_id }}
        description: Project for Orchestrators
        users: [k8-deploy-user-{{ build_id }}, {{ admin_user }}]
        quotas:
          ram: 102400
          cores: 40
  users:
    - user:
        os_creds_name: admin-creds
        name: k8-deploy-user-{{ build_id }}
        password: {{ os_user_pass }}
        project_name: k8-deploy-proj-{{ build_id }}
        roles: {admin: k8-deploy-proj-{{ build_id }}}
  flavors:
    - flavor:
        os_creds_name: admin-creds
        name: k8-build-flavor-{{ build_id }}
        ram: {{ build_ram | default(4096) }}
        disk: {{ build_disk | default(50) }}
        vcpus: {{ build_cpus | default(1) }}
{% if flavor_metadata is defined %}
        metadata:
        {% for key, value in flavor_metadata.items() %}
          {{ key }}: {{ value }}
        {% endfor %}
{% endif %}
    - flavor:
        os_creds_name: admin-creds
        name: k8-node-flavor-{{ build_id }}
        ram: {{ node_ram | default(8192) }}
        disk: {{ node_disk | default(50) }}
        vcpus: {{ node_cpus | default(4) }}
{% if flavor_metadata is defined %}
        metadata:
        {% for key, value in flavor_metadata.items() %}
          {{ key }}: {{ value }}
        {% endfor %}
{% endif %}
  images:
    - image:
        os_creds_name: admin-creds
{% if ubuntu_version == '18' %}
        name: snaps-image-u18-{{ build_id }}
        download_url: https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img
{% else %}
        name: snaps-image-{{ build_id }}
        download_url: https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img
{% endif %}
        format: qcow2
        public: True
        image_user: ubuntu
  networks:
    - network:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: k8-ctrl-net
        project_name: k8-deploy-proj-{{ build_id }}
{% if overlay_mtu is defined %}
        mtu: {{ overlay_mtu }}
{% endif %}
        subnets:
          - subnet:
              name: k8-ctrl-subnet
              project_name: k8-deploy-proj-{{ build_id }}
              cidr: {{ ctrl_ip_prfx }}.0/24
              dns_nameservers: [8.8.8.8]
    - network:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: k8-admin-net
        project_name: k8-deploy-proj-{{ build_id }}
{% if overlay_mtu is defined %}
        mtu: {{ overlay_mtu }}
{% endif %}
        subnets:
          - subnet:
              name: k8-admin-subnet
              project_name: k8-deploy-proj-{{ build_id }}
              cidr: {{ admin_ip_prfx }}.0/24
              dns_nameservers: []
  volumes:
    - volume:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: ceph-vol
        size: 50
  routers:
    - router:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: k8-ctrl-router
        external_gateway: {{ ext_net }}
        internal_subnets:
          - subnet:
              project_name: k8-deploy-proj-{{ build_id }}
              network_name: k8-ctrl-net
              subnet_name: k8-ctrl-subnet
    - router:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: k8-admin-router
        external_gateway: {{ ext_net }}
        internal_subnets:
          - subnet:
              project_name: k8-deploy-proj-{{ build_id }}
              network_name: k8-admin-net
              subnet_name: k8-admin-subnet
  keypairs:
    - keypair:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: k8-deploy-build-kp
        public_filepath: {{ build_kp_pub_path }}
        private_filepath: {{ build_kp_priv_path }}
        delete_on_clean: True
  security_groups:
    - security_group:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: k8-deploy-build-sg
        rules:
          - direction: ingress
            protocol: icmp
          - direction: ingress
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
          - direction: egress
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
  instances:
    - instance:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: build-k8-vm
        flavor: k8-build-flavor-{{ build_id }}
{% if ubuntu_version == '18' %}
        imageName: snaps-image-u18-{{ build_id }}
{% else %}
        imageName: snaps-image-{{ build_id }}
{% endif %}
        keypair_name: k8-deploy-build-kp
        security_group_names: [k8-deploy-build-sg]
        cloud_init_timeout: 300
        ports:
          - port:
              name: build-ctrl-port
              network_name: k8-ctrl-net
              ip_addrs:
                - subnet_name: k8-ctrl-subnet
          - port:
              name: k8-deploy-admin-port-bld
              network_name: k8-admin-net
              ip_addrs:
                - subnet_name: k8-admin-subnet
                  ip: {{ admin_ip_prfx }}.5

        floating_ips:
          - floating_ip:
              name: fip1
              port_name: build-ctrl-port
              router_name: k8-ctrl-router
        # view in /var/lib/cloud/instance/cloud-config.txt
        userdata: |
          #cloud-config
          packages:
            - python
          password: {{ node_host_pass }}
          chpasswd: { expire: False }
          ssh_pwauth: True
          runcmd:
{% if ubuntu_version == '18' %}
          - [sh, -c, "echo '        ens4:' >> /etc/netplan/50-cloud-init.yaml"]
          - [sh, -c, "echo '            dhcp4: true' >> /etc/netplan/50-cloud-init.yaml"]
          - sudo netplan apply
{% else %}
          - [sh, -c, "echo 'auto ens4' > /etc/network/interfaces.d/ens4.cfg"]
          - [sh, -c, "echo '  iface ens4 inet dhcp' >> /etc/network/interfaces.d/ens4.cfg"]
          - [sh, -c, "sudo systemctl restart networking"]
{% endif %}
    - instance:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: k8-master
        flavor: k8-node-flavor-{{ build_id }}
{% if ubuntu_version == '18' %}
        imageName: snaps-image-u18-{{ build_id }}
{% else %}
        imageName: snaps-image-{{ build_id }}
{% endif %}
        security_group_names: [k8-deploy-build-sg]
        cloud_init_timeout: 300
        volume_names:
          - ceph-vol
        ports:
          - port:
              name: k8-deploy-admin-port-1
              network_name: k8-admin-net
              ip_addrs:
                - subnet_name: k8-admin-subnet
                  ip: {{ admin_ip_prfx }}.11
        # view in /var/lib/cloud/instance/cloud-config.txt
        userdata: |
          #cloud-config
          packages:
            - python
          chpasswd:
            list: |
              root:{{ node_host_pass }}
              ubuntu:{{ node_host_pass }}
            expire: False
          ssh_pwauth: True
          runcmd:
{% if ubuntu_version == '18' %}
            - sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
{% else %}
            - sudo sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin yes/' /etc/ssh/sshd_config
{% endif %}
            - sudo systemctl restart ssh
            - sudo apt install -y python
    - instance:
        os_user:
          name: k8-deploy-user-{{ build_id }}
          project_name: k8-deploy-proj-{{ build_id }}
        name: k8-minion
        flavor: k8-node-flavor-{{ build_id }}
{% if ubuntu_version == '18' %}
        imageName: snaps-image-u18-{{ build_id }}
{% else %}
        imageName: snaps-image-{{ build_id }}
{% endif %}
        security_group_names: [k8-deploy-build-sg]
        cloud_init_timeout: 300
        ports:
          - port:
              name: k8-deploy-admin-port-2
              network_name: k8-admin-net
              ip_addrs:
                - subnet_name: k8-admin-subnet
                  ip: {{ admin_ip_prfx }}.12
        userdata: |
          #cloud-config
          packages:
            - python
          chpasswd:
            list: |
              root:{{ node_host_pass }}
              ubuntu:{{ node_host_pass }}
            expire: False
          ssh_pwauth: True
          runcmd:
{% if ubuntu_version == '18' %}
            - sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
{% else %}
            - sudo sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin yes/' /etc/ssh/sshd_config
{% endif %}
            - sudo systemctl restart ssh
            - sudo apt install -y python
ansible:
  # Install and configure snaps-boot to build host
{% if 'True' == run_build %}
  - playbook_location: {{ local_snaps_k8_dir }}/ci/playbooks/deploy_k8.yaml
    post_processing:
      sleep: 15
    hosts:
    - build-k8-vm
    variables:
      build_id:
        type: string
        value: {{ build_id }}
      branch_name:
        type: string
        value: {{ branch_name }}
      src_copy_dir:
        type: string
        value: {{ src_copy_dir }}
      deployment_yaml_path:
        type: string
        value: {{ deployment_yaml_target_path }}
      admin_iface:
        type: string
        value: {{ admin_iface }}
      master_admin_ip:
        type: port
        vm_name: k8-master
        port_name: k8-deploy-admin-port-1
        port_value: ip_address
      minion_admin_ip:
        type: port
        vm_name: k8-minion
        port_name: k8-deploy-admin-port-2
        port_value: ip_address
      node_host_pass:
        type: string
        value: {{ node_host_pass }}
      inject_keys:
        type: string
        value: {{ inject_keys | default(True) }}
      k8s_version:
        type: string
        value: {{ k8s_version }}
      ubuntu_version:
        type: string
        value: {{ ubuntu_version }}
      kubespray_branch:
        type: string
        value: {{ kubespray_branch | default('f67a24499b0402ae5a591d0ead31c212b29634f4') }}
      networking_plugin:
        type: string
        value: {{ networking_plugin | default('weave') }}
{% endif %}

{% if 'True' == run_validation %}
  - playbook_location: {{ local_snaps_k8_dir }}/ci/playbooks/validation.yaml
    hosts:
    - build-k8-vm
    variables:
      deployment_yaml_path:
        type: string
        value: {{ deployment_yaml_target_path }}
      src_copy_dir:
        type: string
        value: {{ src_copy_dir }}
{% endif %}

{% if 'True' == run_conformance %}
  - playbook_location: {{ local_snaps_k8_dir }}/ci/playbooks/conformance.yaml
    hosts:
    - build-k8-vm
    variables:
      project_name:
        type: string
        value: {{ build_id }}
{% endif %}
