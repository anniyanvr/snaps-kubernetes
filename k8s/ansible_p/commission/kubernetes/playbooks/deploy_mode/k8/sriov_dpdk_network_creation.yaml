#! Copyright 2018 ARICENT HOLDINGS LUXEMBOURG SARL and Cable Television
# Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is responsible for deploying Aricent_Iaas environments and
# Kubernetes Services
---
- hosts: "{{host_name}}"
  become: yes
  become_user: root
  tasks:
      - stat: path=/home/{{network_name}}_file.conf
        register: file_path
      - name: deleting created file
        file: name=/home/{{network_name}}_file.conf state=absent
        when: file_path.stat.exists == true
        ignore_errors: true
      - name : get kernel
        shell: basename `readlink /sys/class/net/{{intf}}/device/driver/module`
        register: res
        delegate_to: "{{node_hostname}}"
      - debug:
          var: res.stdout
 
      - name: Ansible create SR-IOV network file
        copy:
         dest: "/home/{{network_name}}_file.conf"
         content: |
           apiVersion: "kubernetes.com/v1"
           kind: Network
           metadata:
             name: {{network_name}}
           plugin: sriov
           args: '[
             {
                "name": "{{network_name}}",
                "if0": "{{intf}}",
                "dpdk": {
                "kernel_driver": "{{res.stdout}}",
                "dpdk_driver": "{{dpdk_driver}}",
                "dpdk_tool": "{{dpdk_tool}}"
                } 
             }
               
             ]'
       
      - name : creating the sriov network as per the interface
        shell: kubectl create -f {{network_name}}_file.conf
        args:
            chdir: /home/
        register: result
      - debug:
          var: result
      - stat: path=/home/{{network_name}}_file.conf
        register: file_path
      - name: deleting created file
        file: name=/home/{{network_name}}_file.conf state=absent
        when: file_path.stat.exists == true
         
    
